{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Tour de France Prediction Model Testing\n",
    "Testing ML Models"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Import Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import os\n",
    "\n",
    "# ML libraries\n",
    "from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import mean_absolute_error\n",
    "from sklearn.impute import SimpleImputer\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.inspection import PartialDependenceDisplay\n",
    "from sklearn.metrics import classification_report, roc_auc_score\n",
    "from sklearn.metrics import confusion_matrix, roc_curve, auc\n",
    "from sklearn.datasets import make_classification\n",
    "from sklearn.inspection import permutation_importance\n",
    "\n",
    "from xgboost import XGBClassifier\n",
    "\n",
    "from imblearn.pipeline import Pipeline as ImbPipeline\n",
    "from imblearn.over_sampling import SMOTE\n",
    "\n",
    "from statsmodels.stats.outliers_influence import variance_inflation_factor\n",
    "from statsmodels.tools.tools import add_constant\n",
    "\n",
    "import joblib\n",
    "\n",
    "from lime.lime_tabular import LimeTabularExplainer\n",
    "\n",
    "import eli5\n",
    "from eli5.sklearn import PermutationImportance\n",
    "#import shap\n",
    "\n",
    "# Visualisation libraries\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Set Folder Path and Read CSVs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "folder_path = r\"D:\\Data\\Cycling\\TDF_Predictor\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Race metadata\n",
    "prepared_df = pd.read_csv(folder_path+\"/tdf_prepared_2011_2024.csv\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data Investigation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Rider_ID</th>\n",
       "      <th>Year</th>\n",
       "      <th>TDF_Pos</th>\n",
       "      <th>Best_Pos_BT_UWT</th>\n",
       "      <th>Best_Pos_BT_PT</th>\n",
       "      <th>Best_Pos_AT_UWT_YB</th>\n",
       "      <th>Best_Pos_AT_PT_YB</th>\n",
       "      <th>Best_Pos_UWT_YB</th>\n",
       "      <th>Best_Pos_PT_YB</th>\n",
       "      <th>FC_Points_YB</th>\n",
       "      <th>FC_Pos_YB</th>\n",
       "      <th>best_tdf_result</th>\n",
       "      <th>best_other_gt_result</th>\n",
       "      <th>best_recent_tdf_result</th>\n",
       "      <th>best_recent_other_gt_result</th>\n",
       "      <th>tdf_debut</th>\n",
       "      <th>gt_debut</th>\n",
       "      <th>rode_giro</th>\n",
       "      <th>Age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>2011</td>\n",
       "      <td>NaN</td>\n",
       "      <td>67.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3</td>\n",
       "      <td>2011</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>2012</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2685.0</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>2013</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1719.0</td>\n",
       "      <td>12</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3</td>\n",
       "      <td>2014</td>\n",
       "      <td>DNF</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1622.0</td>\n",
       "      <td>13</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>32</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Rider_ID  Year TDF_Pos Best_Pos_BT_UWT Best_Pos_BT_PT Best_Pos_AT_UWT_YB  \\\n",
       "0         2  2011     NaN            67.0            NaN                NaN   \n",
       "1         3  2011     5.0             1.0            NaN                NaN   \n",
       "2         3  2012     NaN             NaN            NaN                NaN   \n",
       "3         3  2013     4.0             3.0            2.0                1.0   \n",
       "4         3  2014     DNF             1.0            NaN                NaN   \n",
       "\n",
       "  Best_Pos_AT_PT_YB Best_Pos_UWT_YB Best_Pos_PT_YB  FC_Points_YB  FC_Pos_YB  \\\n",
       "0               NaN             NaN            NaN           0.0          1   \n",
       "1               NaN             NaN            NaN           0.0          1   \n",
       "2               NaN             1.0            NaN        2685.0          2   \n",
       "3               NaN             1.0            NaN        1719.0         12   \n",
       "4               NaN             3.0            2.0        1622.0         13   \n",
       "\n",
       "   best_tdf_result  best_other_gt_result  best_recent_tdf_result  \\\n",
       "0              NaN                   NaN                     NaN   \n",
       "1              1.0                   1.0                     1.0   \n",
       "2              NaN                   NaN                     NaN   \n",
       "3              1.0                   1.0                     5.0   \n",
       "4              1.0                   1.0                     4.0   \n",
       "\n",
       "   best_recent_other_gt_result  tdf_debut  gt_debut  rode_giro  Age  \n",
       "0                          NaN        NaN       NaN        NaN   40  \n",
       "1                          1.0        0.0       0.0        0.0   29  \n",
       "2                          NaN        NaN       NaN        NaN   30  \n",
       "3                          1.0        0.0       0.0        0.0   31  \n",
       "4                          1.0        0.0       0.0        0.0   32  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prepared_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Random sample of the data for rider's who have ridden the Tour de France in the period of 2011-2024"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Rider_ID</th>\n",
       "      <th>Year</th>\n",
       "      <th>TDF_Pos</th>\n",
       "      <th>Best_Pos_BT_UWT</th>\n",
       "      <th>Best_Pos_BT_PT</th>\n",
       "      <th>Best_Pos_AT_UWT_YB</th>\n",
       "      <th>Best_Pos_AT_PT_YB</th>\n",
       "      <th>Best_Pos_UWT_YB</th>\n",
       "      <th>Best_Pos_PT_YB</th>\n",
       "      <th>FC_Points_YB</th>\n",
       "      <th>FC_Pos_YB</th>\n",
       "      <th>best_tdf_result</th>\n",
       "      <th>best_other_gt_result</th>\n",
       "      <th>best_recent_tdf_result</th>\n",
       "      <th>best_recent_other_gt_result</th>\n",
       "      <th>tdf_debut</th>\n",
       "      <th>gt_debut</th>\n",
       "      <th>rode_giro</th>\n",
       "      <th>Age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>14505</th>\n",
       "      <td>25680</td>\n",
       "      <td>2020</td>\n",
       "      <td>95.0</td>\n",
       "      <td>51.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>20.0</td>\n",
       "      <td>66.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>318.0</td>\n",
       "      <td>231</td>\n",
       "      <td>NaN</td>\n",
       "      <td>82.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>82.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7734</th>\n",
       "      <td>6246</td>\n",
       "      <td>2023</td>\n",
       "      <td>78.0</td>\n",
       "      <td>71.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>88.0</td>\n",
       "      <td>103.0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>341.0</td>\n",
       "      <td>227</td>\n",
       "      <td>86.0</td>\n",
       "      <td>116.0</td>\n",
       "      <td>86.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8583</th>\n",
       "      <td>7640</td>\n",
       "      <td>2023</td>\n",
       "      <td>60.0</td>\n",
       "      <td>52.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>42.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>192.0</td>\n",
       "      <td>320</td>\n",
       "      <td>57.0</td>\n",
       "      <td>63.0</td>\n",
       "      <td>57.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2413</th>\n",
       "      <td>706</td>\n",
       "      <td>2017</td>\n",
       "      <td>47.0</td>\n",
       "      <td>42.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>44.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>342.0</td>\n",
       "      <td>208</td>\n",
       "      <td>38.0</td>\n",
       "      <td>84.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>84.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1921</th>\n",
       "      <td>452</td>\n",
       "      <td>2016</td>\n",
       "      <td>33.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>1303.0</td>\n",
       "      <td>29</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1968</th>\n",
       "      <td>475</td>\n",
       "      <td>2016</td>\n",
       "      <td>129.0</td>\n",
       "      <td>67.0</td>\n",
       "      <td>37.0</td>\n",
       "      <td>103.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>103.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>241.0</td>\n",
       "      <td>269</td>\n",
       "      <td>64.0</td>\n",
       "      <td>48.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>80.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5096</th>\n",
       "      <td>2211</td>\n",
       "      <td>2024</td>\n",
       "      <td>89.0</td>\n",
       "      <td>72.0</td>\n",
       "      <td>DNF</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>43.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>727.0</td>\n",
       "      <td>100</td>\n",
       "      <td>67.0</td>\n",
       "      <td>63.0</td>\n",
       "      <td>77.0</td>\n",
       "      <td>63.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12827</th>\n",
       "      <td>16947</td>\n",
       "      <td>2024</td>\n",
       "      <td>36.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>13.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>795.0</td>\n",
       "      <td>80</td>\n",
       "      <td>46.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>46.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11143</th>\n",
       "      <td>11011</td>\n",
       "      <td>2020</td>\n",
       "      <td>DNF</td>\n",
       "      <td>8.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>987.0</td>\n",
       "      <td>55</td>\n",
       "      <td>NaN</td>\n",
       "      <td>9.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>10.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>984</th>\n",
       "      <td>179</td>\n",
       "      <td>2011</td>\n",
       "      <td>107.0</td>\n",
       "      <td>DNF</td>\n",
       "      <td>37.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>97.0</td>\n",
       "      <td>70.0</td>\n",
       "      <td>150.0</td>\n",
       "      <td>121.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>37</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Rider_ID  Year TDF_Pos Best_Pos_BT_UWT Best_Pos_BT_PT  \\\n",
       "14505     25680  2020    95.0            51.0            NaN   \n",
       "7734       6246  2023    78.0            71.0           60.0   \n",
       "8583       7640  2023    60.0            52.0           36.0   \n",
       "2413        706  2017    47.0            42.0            NaN   \n",
       "1921        452  2016    33.0             7.0            7.0   \n",
       "1968        475  2016   129.0            67.0           37.0   \n",
       "5096       2211  2024    89.0            72.0            DNF   \n",
       "12827     16947  2024    36.0            12.0            5.0   \n",
       "11143     11011  2020     DNF             8.0            NaN   \n",
       "984         179  2011   107.0             DNF           37.0   \n",
       "\n",
       "      Best_Pos_AT_UWT_YB Best_Pos_AT_PT_YB Best_Pos_UWT_YB Best_Pos_PT_YB  \\\n",
       "14505                NaN              20.0            66.0           20.0   \n",
       "7734                 NaN              88.0           103.0           28.0   \n",
       "8583                 NaN               3.0            42.0            3.0   \n",
       "2413                 NaN               NaN            44.0            NaN   \n",
       "1921                11.0               NaN             3.0            7.0   \n",
       "1968               103.0              20.0           103.0           20.0   \n",
       "5096                 NaN               NaN            43.0            NaN   \n",
       "12827               13.0               NaN            13.0            8.0   \n",
       "11143                7.0               NaN             7.0            NaN   \n",
       "984                  NaN               NaN             NaN            NaN   \n",
       "\n",
       "       FC_Points_YB  FC_Pos_YB  best_tdf_result  best_other_gt_result  \\\n",
       "14505         318.0        231              NaN                  82.0   \n",
       "7734          341.0        227             86.0                 116.0   \n",
       "8583          192.0        320             57.0                  63.0   \n",
       "2413          342.0        208             38.0                  84.0   \n",
       "1921         1303.0         29              NaN                   5.0   \n",
       "1968          241.0        269             64.0                  48.0   \n",
       "5096          727.0        100             67.0                  63.0   \n",
       "12827         795.0         80             46.0                  13.0   \n",
       "11143         987.0         55              NaN                   9.0   \n",
       "984             0.0          1             97.0                  70.0   \n",
       "\n",
       "       best_recent_tdf_result  best_recent_other_gt_result  tdf_debut  \\\n",
       "14505                     NaN                         82.0        1.0   \n",
       "7734                     86.0                          NaN        0.0   \n",
       "8583                     57.0                         64.0        0.0   \n",
       "2413                     38.0                         84.0        0.0   \n",
       "1921                      NaN                          5.0        1.0   \n",
       "1968                      NaN                         80.0        0.0   \n",
       "5096                     77.0                         63.0        0.0   \n",
       "12827                    46.0                         13.0        0.0   \n",
       "11143                     NaN                         10.0        1.0   \n",
       "984                     150.0                        121.0        0.0   \n",
       "\n",
       "       gt_debut  rode_giro  Age  \n",
       "14505       0.0        0.0   28  \n",
       "7734        0.0        0.0   32  \n",
       "8583        0.0        0.0   33  \n",
       "2413        0.0        0.0   33  \n",
       "1921        0.0        1.0   34  \n",
       "1968        0.0        0.0   39  \n",
       "5096        0.0        0.0   34  \n",
       "12827       0.0        0.0   29  \n",
       "11143       0.0        0.0   28  \n",
       "984         0.0        1.0   37  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prepared_df[prepared_df[\"TDF_Pos\"].notnull()].sample(n=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>null_count</th>\n",
       "      <th>null_percent</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Rider_ID</th>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Year</th>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TDF_Pos</th>\n",
       "      <td>18608</td>\n",
       "      <td>87.633041</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Best_Pos_BT_UWT</th>\n",
       "      <td>12085</td>\n",
       "      <td>56.913441</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Best_Pos_BT_PT</th>\n",
       "      <td>6775</td>\n",
       "      <td>31.906377</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Best_Pos_AT_UWT_YB</th>\n",
       "      <td>15764</td>\n",
       "      <td>74.239427</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Best_Pos_AT_PT_YB</th>\n",
       "      <td>13721</td>\n",
       "      <td>64.618065</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Best_Pos_UWT_YB</th>\n",
       "      <td>12799</td>\n",
       "      <td>60.275972</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Best_Pos_PT_YB</th>\n",
       "      <td>8654</td>\n",
       "      <td>40.755392</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>FC_Points_YB</th>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>FC_Pos_YB</th>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>best_tdf_result</th>\n",
       "      <td>19261</td>\n",
       "      <td>90.708298</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>best_other_gt_result</th>\n",
       "      <td>19019</td>\n",
       "      <td>89.568616</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>best_recent_tdf_result</th>\n",
       "      <td>19427</td>\n",
       "      <td>91.490063</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>best_recent_other_gt_result</th>\n",
       "      <td>19425</td>\n",
       "      <td>91.480644</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>tdf_debut</th>\n",
       "      <td>18608</td>\n",
       "      <td>87.633041</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>gt_debut</th>\n",
       "      <td>18608</td>\n",
       "      <td>87.633041</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>rode_giro</th>\n",
       "      <td>18608</td>\n",
       "      <td>87.633041</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Age</th>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                             null_count  null_percent\n",
       "Rider_ID                              0      0.000000\n",
       "Year                                  0      0.000000\n",
       "TDF_Pos                           18608     87.633041\n",
       "Best_Pos_BT_UWT                   12085     56.913441\n",
       "Best_Pos_BT_PT                     6775     31.906377\n",
       "Best_Pos_AT_UWT_YB                15764     74.239427\n",
       "Best_Pos_AT_PT_YB                 13721     64.618065\n",
       "Best_Pos_UWT_YB                   12799     60.275972\n",
       "Best_Pos_PT_YB                     8654     40.755392\n",
       "FC_Points_YB                          0      0.000000\n",
       "FC_Pos_YB                             0      0.000000\n",
       "best_tdf_result                   19261     90.708298\n",
       "best_other_gt_result              19019     89.568616\n",
       "best_recent_tdf_result            19427     91.490063\n",
       "best_recent_other_gt_result       19425     91.480644\n",
       "tdf_debut                         18608     87.633041\n",
       "gt_debut                          18608     87.633041\n",
       "rode_giro                         18608     87.633041\n",
       "Age                                   0      0.000000"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "null_summary = prepared_df.isnull().sum().to_frame(name='null_count')\n",
    "null_summary['null_percent'] = (null_summary['null_count'] / len(prepared_df)) * 100\n",
    "null_summary"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Nulls and % null only for rider's who have ridden the TdF:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>null_count</th>\n",
       "      <th>null_percent</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Rider_ID</th>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Year</th>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TDF_Pos</th>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Best_Pos_BT_UWT</th>\n",
       "      <td>93</td>\n",
       "      <td>3.541508</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Best_Pos_BT_PT</th>\n",
       "      <td>838</td>\n",
       "      <td>31.911653</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Best_Pos_AT_UWT_YB</th>\n",
       "      <td>1162</td>\n",
       "      <td>44.249810</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Best_Pos_AT_PT_YB</th>\n",
       "      <td>1680</td>\n",
       "      <td>63.975628</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Best_Pos_UWT_YB</th>\n",
       "      <td>298</td>\n",
       "      <td>11.348058</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Best_Pos_PT_YB</th>\n",
       "      <td>681</td>\n",
       "      <td>25.932978</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>FC_Points_YB</th>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>FC_Pos_YB</th>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>best_tdf_result</th>\n",
       "      <td>653</td>\n",
       "      <td>24.866717</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>best_other_gt_result</th>\n",
       "      <td>411</td>\n",
       "      <td>15.651181</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>best_recent_tdf_result</th>\n",
       "      <td>819</td>\n",
       "      <td>31.188119</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>best_recent_other_gt_result</th>\n",
       "      <td>817</td>\n",
       "      <td>31.111957</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>tdf_debut</th>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>gt_debut</th>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>rode_giro</th>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Age</th>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                             null_count  null_percent\n",
       "Rider_ID                              0      0.000000\n",
       "Year                                  0      0.000000\n",
       "TDF_Pos                               0      0.000000\n",
       "Best_Pos_BT_UWT                      93      3.541508\n",
       "Best_Pos_BT_PT                      838     31.911653\n",
       "Best_Pos_AT_UWT_YB                 1162     44.249810\n",
       "Best_Pos_AT_PT_YB                  1680     63.975628\n",
       "Best_Pos_UWT_YB                     298     11.348058\n",
       "Best_Pos_PT_YB                      681     25.932978\n",
       "FC_Points_YB                          0      0.000000\n",
       "FC_Pos_YB                             0      0.000000\n",
       "best_tdf_result                     653     24.866717\n",
       "best_other_gt_result                411     15.651181\n",
       "best_recent_tdf_result              819     31.188119\n",
       "best_recent_other_gt_result         817     31.111957\n",
       "tdf_debut                             0      0.000000\n",
       "gt_debut                              0      0.000000\n",
       "rode_giro                             0      0.000000\n",
       "Age                                   0      0.000000"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "null_summary_tdf = prepared_df[prepared_df[\"TDF_Pos\"].notnull()].isnull().sum().to_frame(name='null_count')\n",
    "null_summary_tdf['null_percent'] = (null_summary_tdf['null_count'] / len(prepared_df[prepared_df[\"TDF_Pos\"].notnull()])) * 100\n",
    "null_summary_tdf"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Group Age into bins"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "prepared_df['Age_group_5'] = pd.cut(prepared_df['Age'], bins=[0, 25, 30, 35, 100], labels=[0, 1, 2, 3])\n",
    "prepared_df['Age_group_3'] = pd.cut(prepared_df['Age'], bins=[0, 22, 25, 28, 31, 34, 100], labels=[0, 1, 2, 3, 4, 5])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Rider_ID                          0\n",
       "Year                              0\n",
       "TDF_Pos                         459\n",
       "Best_Pos_BT_UWT                1009\n",
       "Best_Pos_BT_PT                 1981\n",
       "Best_Pos_AT_UWT_YB              977\n",
       "Best_Pos_AT_PT_YB               874\n",
       "Best_Pos_UWT_YB                 678\n",
       "Best_Pos_PT_YB                 1031\n",
       "FC_Points_YB                      0\n",
       "FC_Pos_YB                         0\n",
       "best_tdf_result                   0\n",
       "best_other_gt_result              0\n",
       "best_recent_tdf_result            0\n",
       "best_recent_other_gt_result       0\n",
       "tdf_debut                         0\n",
       "gt_debut                          0\n",
       "rode_giro                         0\n",
       "Age                               0\n",
       "Age_group_5                       0\n",
       "Age_group_3                       0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(prepared_df == \"DNF\").sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Rider_ID                       0\n",
       "Year                           0\n",
       "TDF_Pos                        1\n",
       "Best_Pos_BT_UWT                0\n",
       "Best_Pos_BT_PT                 0\n",
       "Best_Pos_AT_UWT_YB             0\n",
       "Best_Pos_AT_PT_YB              0\n",
       "Best_Pos_UWT_YB                0\n",
       "Best_Pos_PT_YB                 0\n",
       "FC_Points_YB                   0\n",
       "FC_Pos_YB                      0\n",
       "best_tdf_result                0\n",
       "best_other_gt_result           0\n",
       "best_recent_tdf_result         0\n",
       "best_recent_other_gt_result    0\n",
       "tdf_debut                      0\n",
       "gt_debut                       0\n",
       "rode_giro                      0\n",
       "Age                            0\n",
       "Age_group_5                    0\n",
       "Age_group_3                    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(prepared_df == \"DSQ\").sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Rider_ID</th>\n",
       "      <th>Year</th>\n",
       "      <th>TDF_Pos</th>\n",
       "      <th>Best_Pos_BT_UWT</th>\n",
       "      <th>Best_Pos_BT_PT</th>\n",
       "      <th>Best_Pos_AT_UWT_YB</th>\n",
       "      <th>Best_Pos_AT_PT_YB</th>\n",
       "      <th>Best_Pos_UWT_YB</th>\n",
       "      <th>Best_Pos_PT_YB</th>\n",
       "      <th>FC_Points_YB</th>\n",
       "      <th>...</th>\n",
       "      <th>best_tdf_result</th>\n",
       "      <th>best_other_gt_result</th>\n",
       "      <th>best_recent_tdf_result</th>\n",
       "      <th>best_recent_other_gt_result</th>\n",
       "      <th>tdf_debut</th>\n",
       "      <th>gt_debut</th>\n",
       "      <th>rode_giro</th>\n",
       "      <th>Age</th>\n",
       "      <th>Age_group_5</th>\n",
       "      <th>Age_group_3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>2011</td>\n",
       "      <td>NaN</td>\n",
       "      <td>67.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>40</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3</td>\n",
       "      <td>2011</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>29</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>2012</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2685.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>30</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>2013</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1719.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>31</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3</td>\n",
       "      <td>2014</td>\n",
       "      <td>DNF</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1622.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>32</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21229</th>\n",
       "      <td>220860</td>\n",
       "      <td>2023</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>19</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21230</th>\n",
       "      <td>229373</td>\n",
       "      <td>2024</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>19</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21231</th>\n",
       "      <td>230418</td>\n",
       "      <td>2024</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>20</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21232</th>\n",
       "      <td>231012</td>\n",
       "      <td>2024</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>20</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21233</th>\n",
       "      <td>237784</td>\n",
       "      <td>2024</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>19</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>21234 rows × 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Rider_ID  Year TDF_Pos Best_Pos_BT_UWT Best_Pos_BT_PT  \\\n",
       "0             2  2011     NaN            67.0            NaN   \n",
       "1             3  2011     5.0             1.0            NaN   \n",
       "2             3  2012     NaN             NaN            NaN   \n",
       "3             3  2013     4.0             3.0            2.0   \n",
       "4             3  2014     DNF             1.0            NaN   \n",
       "...         ...   ...     ...             ...            ...   \n",
       "21229    220860  2023     NaN             NaN            NaN   \n",
       "21230    229373  2024     NaN             NaN            NaN   \n",
       "21231    230418  2024     NaN             NaN            NaN   \n",
       "21232    231012  2024     NaN             NaN            NaN   \n",
       "21233    237784  2024     NaN             NaN            NaN   \n",
       "\n",
       "      Best_Pos_AT_UWT_YB Best_Pos_AT_PT_YB Best_Pos_UWT_YB Best_Pos_PT_YB  \\\n",
       "0                    NaN               NaN             NaN            NaN   \n",
       "1                    NaN               NaN             NaN            NaN   \n",
       "2                    NaN               NaN             1.0            NaN   \n",
       "3                    1.0               NaN             1.0            NaN   \n",
       "4                    NaN               NaN             3.0            2.0   \n",
       "...                  ...               ...             ...            ...   \n",
       "21229                NaN               NaN             NaN            NaN   \n",
       "21230                NaN               NaN             NaN            NaN   \n",
       "21231                NaN               NaN             NaN            NaN   \n",
       "21232                NaN               NaN             NaN            NaN   \n",
       "21233                NaN               NaN             NaN            NaN   \n",
       "\n",
       "       FC_Points_YB  ...  best_tdf_result  best_other_gt_result  \\\n",
       "0               0.0  ...              NaN                   NaN   \n",
       "1               0.0  ...              1.0                   1.0   \n",
       "2            2685.0  ...              NaN                   NaN   \n",
       "3            1719.0  ...              1.0                   1.0   \n",
       "4            1622.0  ...              1.0                   1.0   \n",
       "...             ...  ...              ...                   ...   \n",
       "21229           0.0  ...              NaN                   NaN   \n",
       "21230           0.0  ...              NaN                   NaN   \n",
       "21231           0.0  ...              NaN                   NaN   \n",
       "21232           0.0  ...              NaN                   NaN   \n",
       "21233           0.0  ...              NaN                   NaN   \n",
       "\n",
       "       best_recent_tdf_result  best_recent_other_gt_result  tdf_debut  \\\n",
       "0                         NaN                          NaN        NaN   \n",
       "1                         1.0                          1.0        0.0   \n",
       "2                         NaN                          NaN        NaN   \n",
       "3                         5.0                          1.0        0.0   \n",
       "4                         4.0                          1.0        0.0   \n",
       "...                       ...                          ...        ...   \n",
       "21229                     NaN                          NaN        NaN   \n",
       "21230                     NaN                          NaN        NaN   \n",
       "21231                     NaN                          NaN        NaN   \n",
       "21232                     NaN                          NaN        NaN   \n",
       "21233                     NaN                          NaN        NaN   \n",
       "\n",
       "       gt_debut  rode_giro  Age  Age_group_5 Age_group_3  \n",
       "0           NaN        NaN   40            3           5  \n",
       "1           0.0        0.0   29            1           3  \n",
       "2           NaN        NaN   30            1           3  \n",
       "3           0.0        0.0   31            2           3  \n",
       "4           0.0        0.0   32            2           4  \n",
       "...         ...        ...  ...          ...         ...  \n",
       "21229       NaN        NaN   19            0           0  \n",
       "21230       NaN        NaN   19            0           0  \n",
       "21231       NaN        NaN   20            0           0  \n",
       "21232       NaN        NaN   20            0           0  \n",
       "21233       NaN        NaN   19            0           0  \n",
       "\n",
       "[21234 rows x 21 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prepared_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Dealing with Anomalies"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Rider_ID</th>\n",
       "      <th>Year</th>\n",
       "      <th>TDF_Pos</th>\n",
       "      <th>Best_Pos_BT_UWT</th>\n",
       "      <th>Best_Pos_BT_PT</th>\n",
       "      <th>Best_Pos_AT_UWT_YB</th>\n",
       "      <th>Best_Pos_AT_PT_YB</th>\n",
       "      <th>Best_Pos_UWT_YB</th>\n",
       "      <th>Best_Pos_PT_YB</th>\n",
       "      <th>FC_Points_YB</th>\n",
       "      <th>...</th>\n",
       "      <th>best_tdf_result</th>\n",
       "      <th>best_other_gt_result</th>\n",
       "      <th>best_recent_tdf_result</th>\n",
       "      <th>best_recent_other_gt_result</th>\n",
       "      <th>tdf_debut</th>\n",
       "      <th>gt_debut</th>\n",
       "      <th>rode_giro</th>\n",
       "      <th>Age</th>\n",
       "      <th>Age_group_5</th>\n",
       "      <th>Age_group_3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>9</td>\n",
       "      <td>2016</td>\n",
       "      <td>84.0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>302.0</td>\n",
       "      <td>...</td>\n",
       "      <td>14.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>18.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>32</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>12</td>\n",
       "      <td>2015</td>\n",
       "      <td>DNF</td>\n",
       "      <td>52.0</td>\n",
       "      <td>59.0</td>\n",
       "      <td>DNF</td>\n",
       "      <td>NaN</td>\n",
       "      <td>51.0</td>\n",
       "      <td>31.0</td>\n",
       "      <td>1396.0</td>\n",
       "      <td>...</td>\n",
       "      <td>62.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>34</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>12</td>\n",
       "      <td>2016</td>\n",
       "      <td>DNF</td>\n",
       "      <td>60.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>DNF</td>\n",
       "      <td>NaN</td>\n",
       "      <td>52.0</td>\n",
       "      <td>59.0</td>\n",
       "      <td>518.0</td>\n",
       "      <td>...</td>\n",
       "      <td>62.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>35</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63</th>\n",
       "      <td>14</td>\n",
       "      <td>2021</td>\n",
       "      <td>139.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>55.0</td>\n",
       "      <td>DNF</td>\n",
       "      <td>102.0</td>\n",
       "      <td>116.0</td>\n",
       "      <td>102.0</td>\n",
       "      <td>48.0</td>\n",
       "      <td>...</td>\n",
       "      <td>130.0</td>\n",
       "      <td>127.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>36</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80</th>\n",
       "      <td>18</td>\n",
       "      <td>2013</td>\n",
       "      <td>23.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>9.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>685.0</td>\n",
       "      <td>...</td>\n",
       "      <td>65.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>9.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>30</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18251</th>\n",
       "      <td>58275</td>\n",
       "      <td>2023</td>\n",
       "      <td>36.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>DNF</td>\n",
       "      <td>NaN</td>\n",
       "      <td>DNF</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>26</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18267</th>\n",
       "      <td>58639</td>\n",
       "      <td>2021</td>\n",
       "      <td>25.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>585.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>14.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>14.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>24</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19011</th>\n",
       "      <td>70759</td>\n",
       "      <td>2024</td>\n",
       "      <td>DNF</td>\n",
       "      <td>134.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>68.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>68.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>284.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>25</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19058</th>\n",
       "      <td>71217</td>\n",
       "      <td>2024</td>\n",
       "      <td>115.0</td>\n",
       "      <td>59.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>36.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>259.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>72.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>72.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>25</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19613</th>\n",
       "      <td>82912</td>\n",
       "      <td>2023</td>\n",
       "      <td>61.0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>31.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>146.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>23</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>231 rows × 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Rider_ID  Year TDF_Pos Best_Pos_BT_UWT Best_Pos_BT_PT  \\\n",
       "31            9  2016    84.0            35.0           26.0   \n",
       "45           12  2015     DNF            52.0           59.0   \n",
       "46           12  2016     DNF            60.0            7.0   \n",
       "63           14  2021   139.0             NaN           55.0   \n",
       "80           18  2013    23.0            12.0            NaN   \n",
       "...         ...   ...     ...             ...            ...   \n",
       "18251     58275  2023    36.0             8.0            8.0   \n",
       "18267     58639  2021    25.0            11.0            NaN   \n",
       "19011     70759  2024     DNF           134.0           29.0   \n",
       "19058     71217  2024   115.0            59.0            NaN   \n",
       "19613     82912  2023    61.0            27.0            8.0   \n",
       "\n",
       "      Best_Pos_AT_UWT_YB Best_Pos_AT_PT_YB Best_Pos_UWT_YB Best_Pos_PT_YB  \\\n",
       "31                  13.0               9.0            13.0            9.0   \n",
       "45                   DNF               NaN            51.0           31.0   \n",
       "46                   DNF               NaN            52.0           59.0   \n",
       "63                   DNF             102.0           116.0          102.0   \n",
       "80                   9.0               9.0             9.0            7.0   \n",
       "...                  ...               ...             ...            ...   \n",
       "18251                NaN               DNF             NaN            DNF   \n",
       "18267                NaN               NaN             3.0            NaN   \n",
       "19011               68.0               NaN            68.0            7.0   \n",
       "19058               36.0              38.0            36.0           38.0   \n",
       "19613                NaN               NaN            31.0           11.0   \n",
       "\n",
       "       FC_Points_YB  ...  best_tdf_result  best_other_gt_result  \\\n",
       "31            302.0  ...             14.0                  12.0   \n",
       "45           1396.0  ...             62.0                   NaN   \n",
       "46            518.0  ...             62.0                   NaN   \n",
       "63             48.0  ...            130.0                 127.0   \n",
       "80            685.0  ...             65.0                   8.0   \n",
       "...             ...  ...              ...                   ...   \n",
       "18251           0.0  ...              1.0                   1.0   \n",
       "18267         585.0  ...              NaN                  14.0   \n",
       "19011         284.0  ...              NaN                   NaN   \n",
       "19058         259.0  ...              NaN                  72.0   \n",
       "19613         146.0  ...              NaN                   NaN   \n",
       "\n",
       "       best_recent_tdf_result  best_recent_other_gt_result  tdf_debut  \\\n",
       "31                        NaN                         18.0        0.0   \n",
       "45                        NaN                          NaN        0.0   \n",
       "46                        NaN                          NaN        0.0   \n",
       "63                        NaN                          NaN        0.0   \n",
       "80                        NaN                          9.0        0.0   \n",
       "...                       ...                          ...        ...   \n",
       "18251                     NaN                          1.0        0.0   \n",
       "18267                     NaN                         14.0        0.0   \n",
       "19011                     NaN                          NaN        0.0   \n",
       "19058                     NaN                         72.0        0.0   \n",
       "19613                     NaN                          NaN        0.0   \n",
       "\n",
       "       gt_debut  rode_giro  Age  Age_group_5 Age_group_3  \n",
       "31          0.0        0.0   32            2           4  \n",
       "45          0.0        0.0   34            2           4  \n",
       "46          0.0        1.0   35            2           5  \n",
       "63          0.0        0.0   36            3           5  \n",
       "80          0.0        0.0   30            1           3  \n",
       "...         ...        ...  ...          ...         ...  \n",
       "18251       0.0        0.0   26            1           2  \n",
       "18267       0.0        0.0   24            0           1  \n",
       "19011       0.0        0.0   25            0           1  \n",
       "19058       0.0        0.0   25            0           1  \n",
       "19613       0.0        0.0   23            0           1  \n",
       "\n",
       "[231 rows x 21 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prepared_df[(prepared_df[\"tdf_debut\"]==0) & (prepared_df[\"best_recent_tdf_result\"].isna()) & (prepared_df[\"TDF_Pos\"].notnull())]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Riders who have a ridden a Grand Tour in their lifetime, but not in the past 3 years. \n",
    "There are many possible reasons for this happening:\n",
    "- DNFs are Null, so if they didn't finish any race started in the past 3 years their best result will be Null\n",
    "- They may be returning from a racing ban (usually 2 years for doping violations)\n",
    "- Returning from a serious injury\n",
    "- Returning from a career break\n",
    "\n",
    "The highest result of any of these is 38th (from a rider who had finished 6th in the past), generally these riders finish in low positions or DNF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Rider_ID</th>\n",
       "      <th>Year</th>\n",
       "      <th>TDF_Pos</th>\n",
       "      <th>Best_Pos_BT_UWT</th>\n",
       "      <th>Best_Pos_BT_PT</th>\n",
       "      <th>Best_Pos_AT_UWT_YB</th>\n",
       "      <th>Best_Pos_AT_PT_YB</th>\n",
       "      <th>Best_Pos_UWT_YB</th>\n",
       "      <th>Best_Pos_PT_YB</th>\n",
       "      <th>FC_Points_YB</th>\n",
       "      <th>...</th>\n",
       "      <th>best_tdf_result</th>\n",
       "      <th>best_other_gt_result</th>\n",
       "      <th>best_recent_tdf_result</th>\n",
       "      <th>best_recent_other_gt_result</th>\n",
       "      <th>tdf_debut</th>\n",
       "      <th>gt_debut</th>\n",
       "      <th>rode_giro</th>\n",
       "      <th>Age</th>\n",
       "      <th>Age_group_5</th>\n",
       "      <th>Age_group_3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>12</td>\n",
       "      <td>2015</td>\n",
       "      <td>DNF</td>\n",
       "      <td>52.0</td>\n",
       "      <td>59.0</td>\n",
       "      <td>DNF</td>\n",
       "      <td>NaN</td>\n",
       "      <td>51.0</td>\n",
       "      <td>31.0</td>\n",
       "      <td>1396.0</td>\n",
       "      <td>...</td>\n",
       "      <td>62.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>34</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>12</td>\n",
       "      <td>2016</td>\n",
       "      <td>DNF</td>\n",
       "      <td>60.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>DNF</td>\n",
       "      <td>NaN</td>\n",
       "      <td>52.0</td>\n",
       "      <td>59.0</td>\n",
       "      <td>518.0</td>\n",
       "      <td>...</td>\n",
       "      <td>62.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>35</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63</th>\n",
       "      <td>14</td>\n",
       "      <td>2021</td>\n",
       "      <td>139.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>55.0</td>\n",
       "      <td>DNF</td>\n",
       "      <td>102.0</td>\n",
       "      <td>116.0</td>\n",
       "      <td>102.0</td>\n",
       "      <td>48.0</td>\n",
       "      <td>...</td>\n",
       "      <td>130.0</td>\n",
       "      <td>127.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>36</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>138</th>\n",
       "      <td>28</td>\n",
       "      <td>2015</td>\n",
       "      <td>148.0</td>\n",
       "      <td>83.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>65.0</td>\n",
       "      <td>83.0</td>\n",
       "      <td>46.0</td>\n",
       "      <td>83.0</td>\n",
       "      <td>133.0</td>\n",
       "      <td>...</td>\n",
       "      <td>82.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>36</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>188</th>\n",
       "      <td>33</td>\n",
       "      <td>2011</td>\n",
       "      <td>DNF</td>\n",
       "      <td>105.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>118.0</td>\n",
       "      <td>92.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>31</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>305</th>\n",
       "      <td>55</td>\n",
       "      <td>2012</td>\n",
       "      <td>DNF</td>\n",
       "      <td>20.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>63.0</td>\n",
       "      <td>31.0</td>\n",
       "      <td>63.0</td>\n",
       "      <td>31.0</td>\n",
       "      <td>49.0</td>\n",
       "      <td>...</td>\n",
       "      <td>9.0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>33</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>535</th>\n",
       "      <td>97</td>\n",
       "      <td>2018</td>\n",
       "      <td>DNF</td>\n",
       "      <td>95.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>DNF</td>\n",
       "      <td>63.0</td>\n",
       "      <td>117.0</td>\n",
       "      <td>52.0</td>\n",
       "      <td>91.0</td>\n",
       "      <td>...</td>\n",
       "      <td>142.0</td>\n",
       "      <td>144.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>36</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>950</th>\n",
       "      <td>170</td>\n",
       "      <td>2021</td>\n",
       "      <td>DNF</td>\n",
       "      <td>101.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>48.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>48.0</td>\n",
       "      <td>56.0</td>\n",
       "      <td>63.0</td>\n",
       "      <td>...</td>\n",
       "      <td>110.0</td>\n",
       "      <td>61.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>38</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>951</th>\n",
       "      <td>170</td>\n",
       "      <td>2022</td>\n",
       "      <td>112.0</td>\n",
       "      <td>DNF</td>\n",
       "      <td>53.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>101.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>75.0</td>\n",
       "      <td>...</td>\n",
       "      <td>110.0</td>\n",
       "      <td>61.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>39</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1077</th>\n",
       "      <td>194</td>\n",
       "      <td>2014</td>\n",
       "      <td>107.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>92.0</td>\n",
       "      <td>DNF</td>\n",
       "      <td>68.0</td>\n",
       "      <td>62.0</td>\n",
       "      <td>...</td>\n",
       "      <td>116.0</td>\n",
       "      <td>121.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>31</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1164</th>\n",
       "      <td>252</td>\n",
       "      <td>2017</td>\n",
       "      <td>45.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>13.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>11.0</td>\n",
       "      <td>232.0</td>\n",
       "      <td>...</td>\n",
       "      <td>9.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>34</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1186</th>\n",
       "      <td>264</td>\n",
       "      <td>2024</td>\n",
       "      <td>38.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>25.0</td>\n",
       "      <td>DNF</td>\n",
       "      <td>11.0</td>\n",
       "      <td>233.0</td>\n",
       "      <td>...</td>\n",
       "      <td>7.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>39</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1192</th>\n",
       "      <td>265</td>\n",
       "      <td>2016</td>\n",
       "      <td>DNF</td>\n",
       "      <td>89.0</td>\n",
       "      <td>59.0</td>\n",
       "      <td>DNF</td>\n",
       "      <td>8.0</td>\n",
       "      <td>96.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>539.0</td>\n",
       "      <td>...</td>\n",
       "      <td>142.0</td>\n",
       "      <td>48.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>32</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1286</th>\n",
       "      <td>297</td>\n",
       "      <td>2012</td>\n",
       "      <td>DNF</td>\n",
       "      <td>36.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>45.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>45.0</td>\n",
       "      <td>52.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>110.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>29</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1558</th>\n",
       "      <td>350</td>\n",
       "      <td>2014</td>\n",
       "      <td>132.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>65.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>67.0</td>\n",
       "      <td>54.0</td>\n",
       "      <td>316.0</td>\n",
       "      <td>...</td>\n",
       "      <td>129.0</td>\n",
       "      <td>105.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>30</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1672</th>\n",
       "      <td>368</td>\n",
       "      <td>2013</td>\n",
       "      <td>150.0</td>\n",
       "      <td>118.0</td>\n",
       "      <td>DNF</td>\n",
       "      <td>NaN</td>\n",
       "      <td>13.0</td>\n",
       "      <td>70.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>74.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>129.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>28</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1783</th>\n",
       "      <td>388</td>\n",
       "      <td>2012</td>\n",
       "      <td>117.0</td>\n",
       "      <td>DNF</td>\n",
       "      <td>12.0</td>\n",
       "      <td>49.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>34.0</td>\n",
       "      <td>106.0</td>\n",
       "      <td>470.0</td>\n",
       "      <td>...</td>\n",
       "      <td>127.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>34</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1785</th>\n",
       "      <td>389</td>\n",
       "      <td>2011</td>\n",
       "      <td>DNF</td>\n",
       "      <td>37.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>93.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>34</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1904</th>\n",
       "      <td>440</td>\n",
       "      <td>2014</td>\n",
       "      <td>75.0</td>\n",
       "      <td>66.0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>23.0</td>\n",
       "      <td>66.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>617.0</td>\n",
       "      <td>...</td>\n",
       "      <td>68.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>36</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2096</th>\n",
       "      <td>547</td>\n",
       "      <td>2014</td>\n",
       "      <td>DNF</td>\n",
       "      <td>55.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>57.0</td>\n",
       "      <td>101.0</td>\n",
       "      <td>43.0</td>\n",
       "      <td>101.0</td>\n",
       "      <td>193.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>91.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>36</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2113</th>\n",
       "      <td>550</td>\n",
       "      <td>2011</td>\n",
       "      <td>139.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>77.0</td>\n",
       "      <td>78.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>29</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2987</th>\n",
       "      <td>800</td>\n",
       "      <td>2017</td>\n",
       "      <td>159.0</td>\n",
       "      <td>128.0</td>\n",
       "      <td>143.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>280.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>155.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>27</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3345</th>\n",
       "      <td>886</td>\n",
       "      <td>2020</td>\n",
       "      <td>DNF</td>\n",
       "      <td>44.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>38.0</td>\n",
       "      <td>DNF</td>\n",
       "      <td>38.0</td>\n",
       "      <td>42.0</td>\n",
       "      <td>94.0</td>\n",
       "      <td>...</td>\n",
       "      <td>41.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>33</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3350</th>\n",
       "      <td>889</td>\n",
       "      <td>2014</td>\n",
       "      <td>DNF</td>\n",
       "      <td>102.0</td>\n",
       "      <td>62.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>64.0</td>\n",
       "      <td>116.0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>111.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>31</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3418</th>\n",
       "      <td>904</td>\n",
       "      <td>2011</td>\n",
       "      <td>158.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>50.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>127.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>30</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3529</th>\n",
       "      <td>925</td>\n",
       "      <td>2011</td>\n",
       "      <td>118.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>33.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>132.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>29</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3663</th>\n",
       "      <td>949</td>\n",
       "      <td>2012</td>\n",
       "      <td>138.0</td>\n",
       "      <td>101.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>63.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>44.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>135.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>28</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3701</th>\n",
       "      <td>962</td>\n",
       "      <td>2012</td>\n",
       "      <td>131.0</td>\n",
       "      <td>87.0</td>\n",
       "      <td>DNF</td>\n",
       "      <td>NaN</td>\n",
       "      <td>DNF</td>\n",
       "      <td>NaN</td>\n",
       "      <td>13.0</td>\n",
       "      <td>178.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>93.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>29</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3732</th>\n",
       "      <td>965</td>\n",
       "      <td>2023</td>\n",
       "      <td>68.0</td>\n",
       "      <td>47.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>DNF</td>\n",
       "      <td>NaN</td>\n",
       "      <td>78.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>301.0</td>\n",
       "      <td>...</td>\n",
       "      <td>78.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>34</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3735</th>\n",
       "      <td>966</td>\n",
       "      <td>2012</td>\n",
       "      <td>75.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>20.0</td>\n",
       "      <td>333.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>113.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>27</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4096</th>\n",
       "      <td>1292</td>\n",
       "      <td>2011</td>\n",
       "      <td>153.0</td>\n",
       "      <td>63.0</td>\n",
       "      <td>42.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>60.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>29</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5426</th>\n",
       "      <td>2326</td>\n",
       "      <td>2020</td>\n",
       "      <td>123.0</td>\n",
       "      <td>DNF</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>112.0</td>\n",
       "      <td>89.0</td>\n",
       "      <td>66.0</td>\n",
       "      <td>...</td>\n",
       "      <td>123.0</td>\n",
       "      <td>76.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>32</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5770</th>\n",
       "      <td>2530</td>\n",
       "      <td>2021</td>\n",
       "      <td>DNF</td>\n",
       "      <td>90.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>DNF</td>\n",
       "      <td>117.0</td>\n",
       "      <td>818.0</td>\n",
       "      <td>...</td>\n",
       "      <td>138.0</td>\n",
       "      <td>140.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>31</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5976</th>\n",
       "      <td>2995</td>\n",
       "      <td>2020</td>\n",
       "      <td>137.0</td>\n",
       "      <td>DNF</td>\n",
       "      <td>120.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>48.0</td>\n",
       "      <td>DNF</td>\n",
       "      <td>48.0</td>\n",
       "      <td>73.0</td>\n",
       "      <td>...</td>\n",
       "      <td>73.0</td>\n",
       "      <td>103.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>32</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6015</th>\n",
       "      <td>3045</td>\n",
       "      <td>2022</td>\n",
       "      <td>110.0</td>\n",
       "      <td>75.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>110.0</td>\n",
       "      <td>111.0</td>\n",
       "      <td>79.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>...</td>\n",
       "      <td>126.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>32</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6046</th>\n",
       "      <td>3051</td>\n",
       "      <td>2017</td>\n",
       "      <td>147.0</td>\n",
       "      <td>97.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>121.0</td>\n",
       "      <td>106.0</td>\n",
       "      <td>70.0</td>\n",
       "      <td>84.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>125.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>26</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6050</th>\n",
       "      <td>3051</td>\n",
       "      <td>2022</td>\n",
       "      <td>122.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>116.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>123.0</td>\n",
       "      <td>125.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>31</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6211</th>\n",
       "      <td>3133</td>\n",
       "      <td>2023</td>\n",
       "      <td>124.0</td>\n",
       "      <td>78.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>35.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>291.0</td>\n",
       "      <td>...</td>\n",
       "      <td>98.0</td>\n",
       "      <td>111.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>37</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6504</th>\n",
       "      <td>3224</td>\n",
       "      <td>2016</td>\n",
       "      <td>128.0</td>\n",
       "      <td>71.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>80.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>22.0</td>\n",
       "      <td>112.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>107.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>29</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6545</th>\n",
       "      <td>3277</td>\n",
       "      <td>2024</td>\n",
       "      <td>DNF</td>\n",
       "      <td>92.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>108.0</td>\n",
       "      <td>61.0</td>\n",
       "      <td>108.0</td>\n",
       "      <td>61.0</td>\n",
       "      <td>429.0</td>\n",
       "      <td>...</td>\n",
       "      <td>138.0</td>\n",
       "      <td>112.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>34</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6815</th>\n",
       "      <td>3933</td>\n",
       "      <td>2013</td>\n",
       "      <td>142.0</td>\n",
       "      <td>118.0</td>\n",
       "      <td>46.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>44.0</td>\n",
       "      <td>54.0</td>\n",
       "      <td>193.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>118.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>24</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7613</th>\n",
       "      <td>6228</td>\n",
       "      <td>2024</td>\n",
       "      <td>80.0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>723.0</td>\n",
       "      <td>...</td>\n",
       "      <td>94.0</td>\n",
       "      <td>54.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>33</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7817</th>\n",
       "      <td>6266</td>\n",
       "      <td>2021</td>\n",
       "      <td>118.0</td>\n",
       "      <td>56.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>9.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>9.0</td>\n",
       "      <td>183.0</td>\n",
       "      <td>...</td>\n",
       "      <td>118.0</td>\n",
       "      <td>116.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>29</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8961</th>\n",
       "      <td>7919</td>\n",
       "      <td>2017</td>\n",
       "      <td>75.0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>73.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>432.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>155.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>27</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9950</th>\n",
       "      <td>9073</td>\n",
       "      <td>2021</td>\n",
       "      <td>DNF</td>\n",
       "      <td>78.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>DNF</td>\n",
       "      <td>NaN</td>\n",
       "      <td>11.0</td>\n",
       "      <td>315.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>112.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>28</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10570</th>\n",
       "      <td>9894</td>\n",
       "      <td>2023</td>\n",
       "      <td>133.0</td>\n",
       "      <td>51.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>67.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>72.0</td>\n",
       "      <td>...</td>\n",
       "      <td>113.0</td>\n",
       "      <td>68.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>30</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12073</th>\n",
       "      <td>16154</td>\n",
       "      <td>2021</td>\n",
       "      <td>DNF</td>\n",
       "      <td>114.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>DNF</td>\n",
       "      <td>69.0</td>\n",
       "      <td>157.0</td>\n",
       "      <td>...</td>\n",
       "      <td>170.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>29</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12375</th>\n",
       "      <td>16672</td>\n",
       "      <td>2022</td>\n",
       "      <td>DNF</td>\n",
       "      <td>57.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>32.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1646.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>57.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>27</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12541</th>\n",
       "      <td>16752</td>\n",
       "      <td>2020</td>\n",
       "      <td>122.0</td>\n",
       "      <td>DNF</td>\n",
       "      <td>36.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>25.0</td>\n",
       "      <td>86.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>1083.0</td>\n",
       "      <td>...</td>\n",
       "      <td>104.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>28</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13962</th>\n",
       "      <td>20836</td>\n",
       "      <td>2024</td>\n",
       "      <td>90.0</td>\n",
       "      <td>103.0</td>\n",
       "      <td>41.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>55.0</td>\n",
       "      <td>110.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>...</td>\n",
       "      <td>117.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>30</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16117</th>\n",
       "      <td>37303</td>\n",
       "      <td>2023</td>\n",
       "      <td>108.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>DNF</td>\n",
       "      <td>48.0</td>\n",
       "      <td>DNF</td>\n",
       "      <td>14.0</td>\n",
       "      <td>471.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>130.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>27</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17104</th>\n",
       "      <td>43007</td>\n",
       "      <td>2022</td>\n",
       "      <td>53.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>DNF</td>\n",
       "      <td>57.0</td>\n",
       "      <td>59.0</td>\n",
       "      <td>57.0</td>\n",
       "      <td>184.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>121.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>27</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>52 rows × 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Rider_ID  Year TDF_Pos Best_Pos_BT_UWT Best_Pos_BT_PT  \\\n",
       "45           12  2015     DNF            52.0           59.0   \n",
       "46           12  2016     DNF            60.0            7.0   \n",
       "63           14  2021   139.0             NaN           55.0   \n",
       "138          28  2015   148.0            83.0            2.0   \n",
       "188          33  2011     DNF           105.0           36.0   \n",
       "305          55  2012     DNF            20.0           23.0   \n",
       "535          97  2018     DNF            95.0           22.0   \n",
       "950         170  2021     DNF           101.0           21.0   \n",
       "951         170  2022   112.0             DNF           53.0   \n",
       "1077        194  2014   107.0            60.0           20.0   \n",
       "1164        252  2017    45.0            24.0            NaN   \n",
       "1186        264  2024    38.0            24.0            NaN   \n",
       "1192        265  2016     DNF            89.0           59.0   \n",
       "1286        297  2012     DNF            36.0           36.0   \n",
       "1558        350  2014   132.0             NaN           65.0   \n",
       "1672        368  2013   150.0           118.0            DNF   \n",
       "1783        388  2012   117.0             DNF           12.0   \n",
       "1785        389  2011     DNF            37.0            3.0   \n",
       "1904        440  2014    75.0            66.0           27.0   \n",
       "2096        547  2014     DNF            55.0           24.0   \n",
       "2113        550  2011   139.0             6.0            NaN   \n",
       "2987        800  2017   159.0           128.0          143.0   \n",
       "3345        886  2020     DNF            44.0            NaN   \n",
       "3350        889  2014     DNF           102.0           62.0   \n",
       "3418        904  2011   158.0             NaN           50.0   \n",
       "3529        925  2011   118.0            50.0           33.0   \n",
       "3663        949  2012   138.0           101.0           24.0   \n",
       "3701        962  2012   131.0            87.0            DNF   \n",
       "3732        965  2023    68.0            47.0           14.0   \n",
       "3735        966  2012    75.0            25.0           16.0   \n",
       "4096       1292  2011   153.0            63.0           42.0   \n",
       "5426       2326  2020   123.0             DNF            NaN   \n",
       "5770       2530  2021     DNF            90.0           20.0   \n",
       "5976       2995  2020   137.0             DNF          120.0   \n",
       "6015       3045  2022   110.0            75.0           64.0   \n",
       "6046       3051  2017   147.0            97.0           12.0   \n",
       "6050       3051  2022   122.0             NaN          116.0   \n",
       "6211       3133  2023   124.0            78.0           15.0   \n",
       "6504       3224  2016   128.0            71.0           53.0   \n",
       "6545       3277  2024     DNF            92.0            1.0   \n",
       "6815       3933  2013   142.0           118.0           46.0   \n",
       "7613       6228  2024    80.0            45.0            5.0   \n",
       "7817       6266  2021   118.0            56.0            NaN   \n",
       "8961       7919  2017    75.0            35.0            6.0   \n",
       "9950       9073  2021     DNF            78.0           12.0   \n",
       "10570      9894  2023   133.0            51.0            NaN   \n",
       "12073     16154  2021     DNF           114.0            8.0   \n",
       "12375     16672  2022     DNF            57.0            NaN   \n",
       "12541     16752  2020   122.0             DNF           36.0   \n",
       "13962     20836  2024    90.0           103.0           41.0   \n",
       "16117     37303  2023   108.0            55.0           13.0   \n",
       "17104     43007  2022    53.0            40.0            1.0   \n",
       "\n",
       "      Best_Pos_AT_UWT_YB Best_Pos_AT_PT_YB Best_Pos_UWT_YB Best_Pos_PT_YB  \\\n",
       "45                   DNF               NaN            51.0           31.0   \n",
       "46                   DNF               NaN            52.0           59.0   \n",
       "63                   DNF             102.0           116.0          102.0   \n",
       "138                 65.0              83.0            46.0           83.0   \n",
       "188                  NaN               NaN             NaN            NaN   \n",
       "305                 63.0              31.0            63.0           31.0   \n",
       "535                  DNF              63.0           117.0           52.0   \n",
       "950                 48.0               NaN            48.0           56.0   \n",
       "951                  NaN               NaN           101.0           21.0   \n",
       "1077                 NaN              92.0             DNF           68.0   \n",
       "1164                 NaN              13.0             NaN           11.0   \n",
       "1186                 NaN              25.0             DNF           11.0   \n",
       "1192                 DNF               8.0            96.0            8.0   \n",
       "1286                 NaN              45.0             NaN           45.0   \n",
       "1558                 NaN               NaN            67.0           54.0   \n",
       "1672                 NaN              13.0            70.0           13.0   \n",
       "1783                49.0               NaN            34.0          106.0   \n",
       "1785                 NaN               NaN             NaN            NaN   \n",
       "1904                 NaN              23.0            66.0            8.0   \n",
       "2096                57.0             101.0            43.0          101.0   \n",
       "2113                 NaN               NaN             NaN            NaN   \n",
       "2987                14.0              64.0            14.0           64.0   \n",
       "3345                38.0               DNF            38.0           42.0   \n",
       "3350                 NaN              64.0           116.0           27.0   \n",
       "3418                 NaN               NaN             NaN            NaN   \n",
       "3529                 NaN               NaN             NaN            NaN   \n",
       "3663                 NaN              63.0             NaN           44.0   \n",
       "3701                 NaN               DNF             NaN           13.0   \n",
       "3732                 DNF               NaN            78.0           60.0   \n",
       "3735                 NaN               NaN             NaN           20.0   \n",
       "4096                 NaN               NaN             NaN            NaN   \n",
       "5426                 NaN               NaN           112.0           89.0   \n",
       "5770                 NaN               NaN             DNF          117.0   \n",
       "5976                 NaN              48.0             DNF           48.0   \n",
       "6015                 NaN             110.0           111.0           79.0   \n",
       "6046                 NaN             121.0           106.0           70.0   \n",
       "6050                 NaN               NaN             NaN            NaN   \n",
       "6211                 NaN              35.0            40.0           17.0   \n",
       "6504                 NaN              80.0             NaN           22.0   \n",
       "6545               108.0              61.0           108.0           61.0   \n",
       "6815                44.0               NaN            44.0           54.0   \n",
       "7613                 1.0               NaN             1.0           17.0   \n",
       "7817                 NaN               9.0             NaN            9.0   \n",
       "8961                 NaN               NaN            73.0            1.0   \n",
       "9950                 NaN               DNF             NaN           11.0   \n",
       "10570                NaN               NaN            67.0           17.0   \n",
       "12073                NaN               NaN             DNF           69.0   \n",
       "12375                NaN               NaN            32.0            NaN   \n",
       "12541                NaN              25.0            86.0            7.0   \n",
       "13962                NaN              55.0           110.0           55.0   \n",
       "16117                DNF              48.0             DNF           14.0   \n",
       "17104                DNF              57.0            59.0           57.0   \n",
       "\n",
       "       FC_Points_YB  ...  best_tdf_result  best_other_gt_result  \\\n",
       "45           1396.0  ...             62.0                   NaN   \n",
       "46            518.0  ...             62.0                   NaN   \n",
       "63             48.0  ...            130.0                 127.0   \n",
       "138           133.0  ...             82.0                  11.0   \n",
       "188             0.0  ...            118.0                  92.0   \n",
       "305            49.0  ...              9.0                  28.0   \n",
       "535            91.0  ...            142.0                 144.0   \n",
       "950            63.0  ...            110.0                  61.0   \n",
       "951            75.0  ...            110.0                  61.0   \n",
       "1077           62.0  ...            116.0                 121.0   \n",
       "1164          232.0  ...              9.0                  18.0   \n",
       "1186          233.0  ...              7.0                   6.0   \n",
       "1192          539.0  ...            142.0                  48.0   \n",
       "1286           52.0  ...              NaN                 110.0   \n",
       "1558          316.0  ...            129.0                 105.0   \n",
       "1672           74.0  ...              NaN                 129.0   \n",
       "1783          470.0  ...            127.0                   NaN   \n",
       "1785            0.0  ...              NaN                  93.0   \n",
       "1904          617.0  ...             68.0                  80.0   \n",
       "2096          193.0  ...              NaN                  91.0   \n",
       "2113            0.0  ...             77.0                  78.0   \n",
       "2987          280.0  ...              NaN                 155.0   \n",
       "3345           94.0  ...             41.0                  29.0   \n",
       "3350           13.0  ...              NaN                 111.0   \n",
       "3418            0.0  ...              NaN                 127.0   \n",
       "3529            0.0  ...              NaN                 132.0   \n",
       "3663            1.0  ...              NaN                 135.0   \n",
       "3701          178.0  ...              NaN                  93.0   \n",
       "3732          301.0  ...             78.0                   NaN   \n",
       "3735          333.0  ...              NaN                 113.0   \n",
       "4096            0.0  ...              NaN                  60.0   \n",
       "5426           66.0  ...            123.0                  76.0   \n",
       "5770          818.0  ...            138.0                 140.0   \n",
       "5976           73.0  ...             73.0                 103.0   \n",
       "6015           17.0  ...            126.0                 130.0   \n",
       "6046           84.0  ...              NaN                 125.0   \n",
       "6050            0.0  ...            123.0                 125.0   \n",
       "6211          291.0  ...             98.0                 111.0   \n",
       "6504          112.0  ...              NaN                 107.0   \n",
       "6545          429.0  ...            138.0                 112.0   \n",
       "6815          193.0  ...              NaN                 118.0   \n",
       "7613          723.0  ...             94.0                  54.0   \n",
       "7817          183.0  ...            118.0                 116.0   \n",
       "8961          432.0  ...              NaN                 155.0   \n",
       "9950          315.0  ...              NaN                 112.0   \n",
       "10570          72.0  ...            113.0                  68.0   \n",
       "12073         157.0  ...            170.0                   NaN   \n",
       "12375        1646.0  ...              NaN                  57.0   \n",
       "12541        1083.0  ...            104.0                   NaN   \n",
       "13962          23.0  ...            117.0                   NaN   \n",
       "16117         471.0  ...              NaN                 130.0   \n",
       "17104         184.0  ...              NaN                 121.0   \n",
       "\n",
       "       best_recent_tdf_result  best_recent_other_gt_result  tdf_debut  \\\n",
       "45                        NaN                          NaN        0.0   \n",
       "46                        NaN                          NaN        0.0   \n",
       "63                        NaN                          NaN        0.0   \n",
       "138                       NaN                          NaN        0.0   \n",
       "188                       NaN                          NaN        0.0   \n",
       "305                       NaN                          NaN        0.0   \n",
       "535                       NaN                          NaN        0.0   \n",
       "950                       NaN                          NaN        0.0   \n",
       "951                       NaN                          NaN        0.0   \n",
       "1077                      NaN                          NaN        0.0   \n",
       "1164                      NaN                          NaN        0.0   \n",
       "1186                      NaN                          NaN        0.0   \n",
       "1192                      NaN                          NaN        0.0   \n",
       "1286                      NaN                          NaN        1.0   \n",
       "1558                      NaN                          NaN        0.0   \n",
       "1672                      NaN                          NaN        1.0   \n",
       "1783                      NaN                          NaN        0.0   \n",
       "1785                      NaN                          NaN        1.0   \n",
       "1904                      NaN                          NaN        0.0   \n",
       "2096                      NaN                          NaN        1.0   \n",
       "2113                      NaN                          NaN        0.0   \n",
       "2987                      NaN                          NaN        1.0   \n",
       "3345                      NaN                          NaN        0.0   \n",
       "3350                      NaN                          NaN        0.0   \n",
       "3418                      NaN                          NaN        1.0   \n",
       "3529                      NaN                          NaN        1.0   \n",
       "3663                      NaN                          NaN        1.0   \n",
       "3701                      NaN                          NaN        1.0   \n",
       "3732                      NaN                          NaN        0.0   \n",
       "3735                      NaN                          NaN        1.0   \n",
       "4096                      NaN                          NaN        1.0   \n",
       "5426                      NaN                          NaN        0.0   \n",
       "5770                      NaN                          NaN        0.0   \n",
       "5976                      NaN                          NaN        0.0   \n",
       "6015                      NaN                          NaN        0.0   \n",
       "6046                      NaN                          NaN        1.0   \n",
       "6050                      NaN                          NaN        0.0   \n",
       "6211                      NaN                          NaN        0.0   \n",
       "6504                      NaN                          NaN        1.0   \n",
       "6545                      NaN                          NaN        0.0   \n",
       "6815                      NaN                          NaN        1.0   \n",
       "7613                      NaN                          NaN        0.0   \n",
       "7817                      NaN                          NaN        0.0   \n",
       "8961                      NaN                          NaN        1.0   \n",
       "9950                      NaN                          NaN        1.0   \n",
       "10570                     NaN                          NaN        0.0   \n",
       "12073                     NaN                          NaN        0.0   \n",
       "12375                     NaN                          NaN        0.0   \n",
       "12541                     NaN                          NaN        0.0   \n",
       "13962                     NaN                          NaN        0.0   \n",
       "16117                     NaN                          NaN        1.0   \n",
       "17104                     NaN                          NaN        1.0   \n",
       "\n",
       "       gt_debut  rode_giro  Age  Age_group_5 Age_group_3  \n",
       "45          0.0        0.0   34            2           4  \n",
       "46          0.0        1.0   35            2           5  \n",
       "63          0.0        0.0   36            3           5  \n",
       "138         0.0        0.0   36            3           5  \n",
       "188         0.0        0.0   31            2           3  \n",
       "305         0.0        0.0   33            2           4  \n",
       "535         0.0        0.0   36            3           5  \n",
       "950         0.0        0.0   38            3           5  \n",
       "951         0.0        0.0   39            3           5  \n",
       "1077        0.0        0.0   31            2           3  \n",
       "1164        0.0        0.0   34            2           4  \n",
       "1186        0.0        0.0   39            3           5  \n",
       "1192        0.0        0.0   32            2           4  \n",
       "1286        0.0        0.0   29            1           3  \n",
       "1558        0.0        0.0   30            1           3  \n",
       "1672        0.0        0.0   28            1           2  \n",
       "1783        0.0        0.0   34            2           4  \n",
       "1785        0.0        0.0   34            2           4  \n",
       "1904        0.0        0.0   36            3           5  \n",
       "2096        0.0        0.0   36            3           5  \n",
       "2113        0.0        1.0   29            1           3  \n",
       "2987        0.0        0.0   27            1           2  \n",
       "3345        0.0        0.0   33            2           4  \n",
       "3350        0.0        0.0   31            2           3  \n",
       "3418        0.0        0.0   30            1           3  \n",
       "3529        0.0        0.0   29            1           3  \n",
       "3663        0.0        0.0   28            1           2  \n",
       "3701        0.0        0.0   29            1           3  \n",
       "3732        0.0        0.0   34            2           4  \n",
       "3735        0.0        0.0   27            1           2  \n",
       "4096        0.0        0.0   29            1           3  \n",
       "5426        0.0        0.0   32            2           4  \n",
       "5770        0.0        0.0   31            2           3  \n",
       "5976        0.0        0.0   32            2           4  \n",
       "6015        0.0        0.0   32            2           4  \n",
       "6046        0.0        0.0   26            1           2  \n",
       "6050        0.0        0.0   31            2           3  \n",
       "6211        0.0        0.0   37            3           5  \n",
       "6504        0.0        0.0   29            1           3  \n",
       "6545        0.0        0.0   34            2           4  \n",
       "6815        0.0        1.0   24            0           1  \n",
       "7613        0.0        0.0   33            2           4  \n",
       "7817        0.0        0.0   29            1           3  \n",
       "8961        0.0        0.0   27            1           2  \n",
       "9950        0.0        0.0   28            1           2  \n",
       "10570       0.0        0.0   30            1           3  \n",
       "12073       0.0        0.0   29            1           3  \n",
       "12375       0.0        1.0   27            1           2  \n",
       "12541       0.0        0.0   28            1           2  \n",
       "13962       0.0        0.0   30            1           3  \n",
       "16117       0.0        0.0   27            1           2  \n",
       "17104       0.0        0.0   27            1           2  \n",
       "\n",
       "[52 rows x 21 columns]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prepared_df[\n",
    "    (prepared_df[\"best_recent_tdf_result\"].isna()) &\n",
    "    (prepared_df[\"best_recent_other_gt_result\"].isna()) &\n",
    "    (\n",
    "        (prepared_df[\"best_tdf_result\"].notnull()) |\n",
    "        (prepared_df[\"best_other_gt_result\"].notnull())\n",
    "    ) &\n",
    "    (prepared_df[\"TDF_Pos\"].notnull())\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "ename": "ZeroDivisionError",
     "evalue": "division by zero",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mZeroDivisionError\u001b[0m                         Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[13], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m \u001b[38;5;241;43m1\u001b[39;49m\u001b[38;5;241;43m/\u001b[39;49m\u001b[38;5;241;43m0\u001b[39;49m\n",
      "\u001b[1;31mZeroDivisionError\u001b[0m: division by zero"
     ]
    }
   ],
   "source": [
    "1/0"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Dealing with Nulls and DNFs (etc.)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Scenario 1: Replace DNFs with Nulls\n",
    "- Scenario 2: Replace DNFs and Nulls with Sentinel (999)\n",
    "- Scenario 3: Replace DNFs with Sentinel and leave Nulls\n",
    "- Scenario 4: Replace nulls/DNFs in Best_UWT results with Best_PT results (with weight), if still null use sentinel\n",
    "- Scenario 5: Replace nulls/DNFs in Best_UWT & Best_PT with previous year"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Set a value for the sentinel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sentinel = 999"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get cols with \"DNF\" value (\"DNS\" in same col as \"DNF\")\n",
    "dnf_columns = (prepared_df == \"DNF\").any()[lambda x: x].index.tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get cols with nulls\n",
    "null_columns = (prepared_df.isnull()).any()[lambda x: x].index.tolist()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Scenario 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Replace \"DNF\" with null and create _null indicator columns\n",
    "for col in dnf_columns:\n",
    "    prepared_df[col + \"_null\"] = prepared_df[col].replace(\"DNF\", np.nan)\n",
    "    prepared_df[col + \"_null\"] = prepared_df[col + \"_null\"].replace(\"DSQ\", np.nan)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create List for outputted cols\n",
    "null_columns_list = [col for col in prepared_df.columns if col.endswith(\"_null\")]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "null_columns_list"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Scenario 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "for col in null_columns:\n",
    "    prepared_df[col + \"_sent\"] = prepared_df[col].replace({\"DNF\": np.nan, \"DSQ\": np.nan})\n",
    "    prepared_df[col + '_sent_flag'] = prepared_df[col].isnull().astype(int)\n",
    "    prepared_df[col + '_sent'] = prepared_df[col + \"_sent\"].fillna(sentinel)\n",
    "    prepared_df[col + '_sent'] = prepared_df[col + '_sent'].astype(float).astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sent_columns_list = [col for col in prepared_df.columns if col.endswith(\"_sent\")]\n",
    "sent_flag_columns_list = [col for col in prepared_df.columns if col.endswith(\"_sent_flag\")]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sent_columns_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sent_flag_columns_list"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Scenario 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "for col in dnf_columns:\n",
    "    prepared_df[col + \"_dnf_flag\"] = prepared_df[col].isin([\"DNF\", \"DSQ\"]).astype(int)  # Boolean indicator\n",
    "    prepared_df[col + \"_dnf_sent\"] = prepared_df[col].replace({\"DNF\": sentinel, \"DSQ\": sentinel})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dnf_flag_columns_list = [col for col in prepared_df.columns if col.endswith(\"_dnf_flag\")]\n",
    "dnf_sent_columns_list = [col for col in prepared_df.columns if col.endswith(\"_dnf_sent\")]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Scenario 4"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Set a weight for use of pro-tour result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pt_weight = 1.5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "uwt_pt_pairs = [\n",
    "    (\"Best_Pos_BT_UWT\", \"Best_Pos_BT_PT\"),\n",
    "    (\"Best_Pos_AT_UWT_YB\", \"Best_Pos_AT_PT_YB\"),\n",
    "    (\"Best_Pos_UWT_YB\", \"Best_Pos_PT_YB\"),\n",
    "]\n",
    "\n",
    "for uwt_col, pt_col in uwt_pt_pairs:\n",
    "    def fill_with_pt(row):\n",
    "        val = row[uwt_col]\n",
    "        pt_val = row[pt_col]\n",
    "\n",
    "        if pd.isna(val) or val in [\"DNF\", \"DSQ\"]:\n",
    "            if pd.notna(pt_val) and pt_val not in [\"DNF\", \"DSQ\"]:\n",
    "                try:\n",
    "                    return float(pt_val) * pt_weight\n",
    "                except:\n",
    "                    return sentinel\n",
    "            else:\n",
    "                return sentinel\n",
    "        else:\n",
    "            try:\n",
    "                return float(val)\n",
    "            except:\n",
    "                return sentinel\n",
    "\n",
    "    filled_col_name = f\"{uwt_col}_filled_from_pt\"\n",
    "    prepared_df[filled_col_name] = prepared_df.apply(fill_with_pt, axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "filled_from_pt_columns_list = [col for col in prepared_df.columns if col.endswith(\"_filled_from_pt\")]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "filled_from_pt_columns_list"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Scenario 5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "bt_yb_pairs = [\n",
    "    (\"Best_Pos_BT_UWT\", \"Best_Pos_UWT_YB\"),\n",
    "    (\"Best_Pos_BT_PT\", \"Best_Pos_PT_YB\"),\n",
    "]\n",
    "\n",
    "for bt_col, yb_col in bt_yb_pairs:\n",
    "    def fill_with_yb(row):\n",
    "        val = row[bt_col]\n",
    "        yb_val = row[yb_col]\n",
    "\n",
    "        if pd.isna(val) or val in [\"DNF\", \"DSQ\"]:\n",
    "            if pd.notna(yb_val) and yb_val not in [\"DNF\", \"DSQ\"]:\n",
    "                try:\n",
    "                    return float(yb_val)\n",
    "                except:\n",
    "                    return sentinel\n",
    "            else:\n",
    "                return sentinel\n",
    "        else:\n",
    "            try:\n",
    "                return float(val)\n",
    "            except:\n",
    "                return sentinel\n",
    "\n",
    "    filled_col_name = f\"{bt_col}_filled_from_yb\"\n",
    "    prepared_df[filled_col_name] = prepared_df.apply(fill_with_yb, axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "filled_from_yb_columns_list = [col for col in prepared_df.columns if col.endswith(\"_filled_from_yb\")]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "filled_from_yb_columns_list"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Check Scenarios logic worked"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Count number of sentinel values in each column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Identify relevant columns to check\n",
    "sentinel_cols = [col for col in prepared_df.columns if col.endswith('_sent') \n",
    "                 or col.endswith('_filled_from_pt') or col.endswith('_filled_from_yb')]\n",
    "\n",
    "# Count the number of sentinel values in each\n",
    "sentinel_counts = prepared_df[sentinel_cols].apply(lambda col: (col == sentinel).sum()).sort_values(ascending=False)\n",
    "\n",
    "print(\"Sentinel value counts per column:\")\n",
    "print(sentinel_counts)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Confirm new filled columns aren't empty or completely filled with sentinel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "filled_cols = [col for col in prepared_df.columns if col.endswith('_filled_from_pt') or col.endswith('_filled_from_yb')]\n",
    "\n",
    "for col in filled_cols:\n",
    "    total = len(prepared_df)\n",
    "    sentinel_count = (prepared_df[col] == sentinel).sum()\n",
    "    null_count = prepared_df[col].isnull().sum()\n",
    "    unique_vals = prepared_df[col].nunique(dropna=True)\n",
    "\n",
    "    print(f\"{col}:\")\n",
    "    print(f\"  Total rows: {total}\")\n",
    "    print(f\"  Sentinel count: {sentinel_count}\")\n",
    "    print(f\"  Null count: {null_count}\")\n",
    "    print(f\"  Unique non-null values: {unique_vals}\")\n",
    "    print()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Spot-check the logic of fallback columns (e.g. Scenario 4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Compare original, fallback, and final filled values\n",
    "check_sample = prepared_df[\n",
    "    ['Best_Pos_BT_UWT', 'Best_Pos_BT_PT', 'Best_Pos_BT_UWT_filled_from_pt']\n",
    "].sample(10)\n",
    "\n",
    "print(check_sample)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "prepared_df['TDF_Pos_null'] = pd.to_numeric(prepared_df['TDF_Pos_null'], errors='coerce')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "prepared_df = prepared_df.dropna(subset=['TDF_Pos_dnf_sent'])\n",
    "prepared_df['TDF_Pos_dnf_sent'] = prepared_df['TDF_Pos_dnf_sent'].astype(float).astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Add top20\n",
    "prepared_df['is_top20_null'] = (prepared_df['TDF_Pos_null'] <= 20).astype(int)\n",
    "prepared_df['is_top20_sent'] = (prepared_df['TDF_Pos_sent'] <= 20).astype(int)\n",
    "prepared_df['is_top20_dnf_sent'] = (prepared_df['TDF_Pos_dnf_sent'] <= 20).astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "prepared_df[prepared_df[\"Year\"]==2012].shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "prepared_df[prepared_df[\"Year\"]==2023].shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "prepared_df[prepared_df[\"Year\"]==2024].shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Set year to start from 2012 as data from 2011 will include \"YB\" (Year Before) data which has no data filled"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "prepared_df = prepared_df[prepared_df['Year'] >= 2012]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "prepared_df.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Scenario Testing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "core_features_all = ['tdf_debut', 'gt_debut', 'rode_giro',\n",
    "       'Age', 'Age_group_5', 'Age_group_3']\n",
    "\n",
    "core_features_all = ['gt_debut', 'rode_giro',\n",
    "       'Age']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "scenario_123_dict = {\n",
    "    'null': {\n",
    "        'X': prepared_df[core_features_all + [x for x in null_columns_list if x != 'TDF_Pos_null']],\n",
    "        'y': prepared_df['TDF_Pos_null']\n",
    "    },\n",
    "    'sent': {\n",
    "        'X': prepared_df[core_features_all + \n",
    "                         [x for x in sent_columns_list if x != 'TDF_Pos_sent'] + \n",
    "                         [x for x in sent_flag_columns_list if x != 'TDF_Pos_sent_flag']],\n",
    "        'y': prepared_df['TDF_Pos_sent']\n",
    "    },\n",
    "    'dnf_sent': {\n",
    "        'X': prepared_df[core_features_all + \n",
    "                         [x for x in dnf_sent_columns_list if x != 'TDF_Pos_dnf_sent'] + \n",
    "                         [x for x in dnf_flag_columns_list if x != 'TDF_Pos_dnf_flag']],\n",
    "        'y': prepared_df['TDF_Pos_dnf_sent']\n",
    "    },\n",
    "}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#null_columns_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#sent_columns_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#sent_flag_columns_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "#dnf_sent_columns_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#dnf_flag_columns_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "filled_from_pt_columns_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "filled_from_yb_columns_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "scenario_123_dict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define model pipeline and hyperparameters\n",
    "pipeline = Pipeline([\n",
    "    ('imputer', SimpleImputer(strategy='mean')),\n",
    "    ('scaler', StandardScaler()),\n",
    "    ('classifier', RandomForestClassifier(random_state=42, class_weight='balanced'))\n",
    "])\n",
    "\n",
    "param_grid = {\n",
    "    'classifier__n_estimators': [100, 200],\n",
    "    'classifier__max_depth': [None, 10, 20],\n",
    "    'classifier__min_samples_split': [2, 5],\n",
    "    'classifier__min_samples_leaf': [1, 2]\n",
    "}\n",
    "\n",
    "# Loop over each scenario\n",
    "for scenario_name, scenario_data in scenario_123_dict.items():\n",
    "    print(f\"\\n==============================\")\n",
    "    print(f\"Scenario: {scenario_name}\")\n",
    "    print(f\"==============================\")\n",
    "\n",
    "    # Create binary target\n",
    "    y_binary = (scenario_data['y'] <= 20).astype(int)\n",
    "\n",
    "    # Split data\n",
    "    X_train = scenario_data['X'][(prepared_df['Year'] >= 2012) & (prepared_df['Year'] <= 2023)]\n",
    "    X_test = scenario_data['X'][prepared_df['Year'] == 2024]\n",
    "    y_train = y_binary[(prepared_df['Year'] >= 2012) & (prepared_df['Year'] <= 2023)]\n",
    "    y_test = y_binary[prepared_df['Year'] == 2024]\n",
    "\n",
    "    # Train model with GridSearch\n",
    "    grid_search = GridSearchCV(pipeline, param_grid, cv=5, scoring='roc_auc', n_jobs=-1, verbose=0)\n",
    "    grid_search.fit(X_train, y_train)\n",
    "\n",
    "    best_model = grid_search.best_estimator_\n",
    "    top20_probs = best_model.predict_proba(X_test)[:, 1]\n",
    "    y_test_pred = best_model.predict(X_test)\n",
    "\n",
    "    # Evaluation\n",
    "    print(f\"Best Parameters: {grid_search.best_params_}\")\n",
    "    print(\"Classification Report (Test Set - 2024):\")\n",
    "    print(classification_report(y_test, y_test_pred))\n",
    "    print(\"Confusion Matrix:\")\n",
    "    print(confusion_matrix(y_test, y_test_pred))\n",
    "    print(f\"AUC Score on Test Set: {roc_auc_score(y_test, top20_probs):.3f}\")\n",
    "\n",
    "    # Feature importance\n",
    "    rf_model = best_model.named_steps['classifier']\n",
    "    importances = rf_model.feature_importances_\n",
    "    feature_names = scenario_data['X'].columns\n",
    "\n",
    "    feature_importance_df = pd.DataFrame({\n",
    "        'Feature': feature_names,\n",
    "        'Importance': importances\n",
    "    }).sort_values(by='Importance', ascending=False)\n",
    "\n",
    "    print(\"\\nFeature Importances:\")\n",
    "    print(feature_importance_df.head(30))\n",
    "\n",
    "    # Plot\n",
    "    plt.figure(figsize=(8, 5))\n",
    "    plt.barh(feature_importance_df['Feature'], feature_importance_df['Importance'])\n",
    "    plt.gca().invert_yaxis()\n",
    "    plt.title(f\"Feature Importance - {scenario_name}\")\n",
    "    plt.xlabel(\"Importance\")\n",
    "    plt.tight_layout()\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "1/0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# === Define full feature list ===\n",
    "selected_features = [\n",
    "    'Best_Pos_BT',\n",
    "    'best_recent_other_gt_result',\n",
    "    'best_recent_tdf_result',\n",
    "    #'rode_giro',\n",
    "    #'has_best_pos_BT',\n",
    "    #'has_recent_other_gt_result',\n",
    "    #'has_recent_tdf_result',\n",
    "    #'Best_Pos_BT_null',\n",
    "    #'best_recent_other_gt_result_null',\n",
    "    #'best_recent_tdf_result_null'\n",
    "]\n",
    "\n",
    "# === Train/test split ===\n",
    "X = prepared_df[selected_features]\n",
    "y = prepared_df['is_top20']  # Replace with actual target column name\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, test_size=0.2, random_state=42)\n",
    "\n",
    "# === Train XGBoost model ===\n",
    "model = XGBClassifier(random_state=42, eval_metric='logloss')\n",
    "model.fit(X_train, y_train)\n",
    "\n",
    "# === Evaluate ===\n",
    "y_pred = model.predict(X_test)\n",
    "y_proba = model.predict_proba(X_test)[:, 1]\n",
    "\n",
    "print(\"=== Classification Report ===\")\n",
    "print(classification_report(y_test, y_pred))\n",
    "print(\"\\n=== Confusion Matrix ===\")\n",
    "print(confusion_matrix(y_test, y_pred))\n",
    "print(f\"\\nAUC Score: {roc_auc_score(y_test, y_proba):.4f}\")\n",
    "\n",
    "# === ELI5 Permutation Importance ===\n",
    "perm = PermutationImportance(model, random_state=42).fit(X_test, y_test)\n",
    "eli5.show_weights(perm, feature_names=X_test.columns.tolist())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "feature_sets = {\n",
    "    \"core\": [\n",
    "        'best_recent_tdf_result_null',\n",
    "        'best_recent_other_gt_result_null',\n",
    "        'Best_Pos_BT_null'\n",
    "    ],\n",
    "    \"core_plus_flags\": [\n",
    "        'best_recent_tdf_result',\n",
    "        'best_recent_other_gt_result',\n",
    "        'Best_Pos_BT',\n",
    "        'rode_giro',\n",
    "        'has_recent_tdf_result',\n",
    "        'has_recent_other_gt_result',\n",
    "        'has_best_pos_BT'\n",
    "    ],\n",
    "    \"all_features\": prepared_df.columns.difference(['TDF_Pos', 'is_top20', 'Rider_ID', 'Year']).tolist()\n",
    "}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def evaluate_feature_set(name, features, train_df, test_df, target='is_top20'):\n",
    "    print(f\"\\n=== Evaluating Feature Set: {name} ===\")\n",
    "    X_train = train_df[features]\n",
    "    y_train = train_df[target]\n",
    "    X_test = test_df[features]\n",
    "    y_test = test_df[target]\n",
    "\n",
    "    pipeline = Pipeline([\n",
    "        ('imputer', SimpleImputer(strategy='mean')),\n",
    "        ('scaler', StandardScaler()),\n",
    "        ('classifier', RandomForestClassifier(random_state=42, class_weight='balanced'))\n",
    "    ])\n",
    "\n",
    "    pipeline.fit(X_train, y_train)\n",
    "    probs = pipeline.predict_proba(X_test)[:, 1]\n",
    "    preds = pipeline.predict(X_test)\n",
    "\n",
    "    print(classification_report(y_test, preds))\n",
    "    auc = roc_auc_score(y_test, probs)\n",
    "    print(f\"AUC Score: {auc:.4f}\")\n",
    "    return name, auc\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "results = []\n",
    "\n",
    "train_df = prepared_df[(prepared_df['Year'] >= 2011) & (prepared_df['Year'] <= 2023)]\n",
    "test_df = prepared_df[prepared_df['Year'] == 2024]\n",
    "\n",
    "for name, features in feature_sets.items():\n",
    "    result = evaluate_feature_set(name, features, train_df, test_df)\n",
    "    results.append(result)\n",
    "\n",
    "# Sort and display\n",
    "results.sort(key=lambda x: x[1], reverse=True)\n",
    "print(\"\\n==== Summary ====\")\n",
    "for name, auc in results:\n",
    "    print(f\"{name}: AUC = {auc:.4f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Step 1: Define your features and target\n",
    "features = feature_sets['core_plus_flags']\n",
    "target = 'is_top20'\n",
    "\n",
    "X_train = train_df[features]\n",
    "y_train = train_df[target]\n",
    "X_test = test_df[features]\n",
    "y_test = test_df[target]\n",
    "\n",
    "# Step 2: Define the XGBoost pipeline\n",
    "pipeline = Pipeline([\n",
    "    ('imputer', SimpleImputer(strategy='mean')),\n",
    "    ('scaler', StandardScaler()),\n",
    "    ('classifier', XGBClassifier(random_state=42, use_label_encoder=False, eval_metric='logloss'))\n",
    "])\n",
    "\n",
    "# Step 3: Fit the pipeline\n",
    "pipeline.fit(X_train, y_train)\n",
    "best_model = pipeline\n",
    "y_pred = best_model.predict(X_test)\n",
    "probs = best_model.predict_proba(X_test)[:, 1]\n",
    "\n",
    "# Step 4: Evaluate performance\n",
    "print(\"Classification Report:\")\n",
    "print(classification_report(y_test, y_pred))\n",
    "print(\"Confusion Matrix:\")\n",
    "print(confusion_matrix(y_test, y_pred))\n",
    "print(f\"AUC Score: {roc_auc_score(y_test, probs):.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Extract trained model\n",
    "xgb_model = best_model.named_steps['classifier']\n",
    "\n",
    "# Get imputed and scaled data to match the trained model input\n",
    "X_train_processed = best_model.named_steps['scaler'].transform(\n",
    "    best_model.named_steps['imputer'].transform(X_train)\n",
    ")\n",
    "\n",
    "# Run permutation importance\n",
    "perm = PermutationImportance(xgb_model, random_state=42, scoring='roc_auc').fit(X_train_processed, y_train)\n",
    "\n",
    "# Display feature importances\n",
    "eli5.show_weights(perm, feature_names=features)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(eli5.format_as_text(eli5.explain_weights(perm, feature_names=features)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "1/0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Step 1: Define binary target\n",
    "prepared_df['is_top20'] = (prepared_df['TDF_Pos'] <= 20).astype(int)\n",
    "\n",
    "\n",
    "# Features will nulls included and no flags\n",
    "features = [\n",
    "    'best_recent_tdf_result_null',\n",
    "    'best_recent_other_gt_result_null',\n",
    "    'Best_Pos_BT_null',\n",
    "    #'rode_giro'\n",
    "]\n",
    "\n",
    "target = 'is_top20'\n",
    "\n",
    "# Step 3: Filter training and testing data\n",
    "train_df = prepared_df[(prepared_df['Year'] >= 2011) & (prepared_df['Year'] <= 2023)]\n",
    "test_df = prepared_df[prepared_df['Year'] == 2024]\n",
    "\n",
    "X_train = train_df[features]\n",
    "y_train = train_df[target]\n",
    "X_test = test_df[features]\n",
    "y_test = test_df[target]\n",
    "\n",
    "# Step 4: Define pipeline and grid search\n",
    "pipeline = Pipeline([\n",
    "    ('imputer', SimpleImputer(strategy='mean')),\n",
    "    ('scaler', StandardScaler()),\n",
    "    ('classifier', RandomForestClassifier(random_state=42, class_weight='balanced'))\n",
    "])\n",
    "\n",
    "param_grid = {\n",
    "    'classifier__n_estimators': [100, 200],\n",
    "    'classifier__max_depth': [None, 10, 20],\n",
    "    'classifier__min_samples_split': [2, 5],\n",
    "    'classifier__min_samples_leaf': [1, 2]\n",
    "}\n",
    "\n",
    "# Step 5: Train model\n",
    "grid_search = GridSearchCV(pipeline, param_grid, cv=5, scoring='roc_auc', n_jobs=-1, verbose=0)\n",
    "grid_search.fit(X_train, y_train)\n",
    "\n",
    "# Step 6: Evaluate\n",
    "best_model = grid_search.best_estimator_\n",
    "top20_probs = best_model.predict_proba(X_test)[:, 1]\n",
    "y_test_pred = best_model.predict(X_test)\n",
    "\n",
    "print(\"\\n==============================\")\n",
    "print(\"Training config: All (2011–2023)\")\n",
    "print(\"==============================\")\n",
    "print(f\"Best Parameters: {grid_search.best_params_}\")\n",
    "print(\"Classification Report (Test Set - 2024):\")\n",
    "print(classification_report(y_test, y_test_pred))\n",
    "print(\"Confusion Matrix:\")\n",
    "print(confusion_matrix(y_test, y_test_pred))\n",
    "print(f\"AUC Score on Test Set: {roc_auc_score(y_test, top20_probs):.3f}\")\n",
    "\n",
    "# Step 7: Feature importances\n",
    "rf_model = best_model.named_steps['classifier']\n",
    "importances = rf_model.feature_importances_\n",
    "\n",
    "feature_importance_df = pd.DataFrame({\n",
    "    'Feature': features,\n",
    "    'Importance': importances\n",
    "}).sort_values(by='Importance', ascending=False)\n",
    "\n",
    "print(\"\\nFeature Importances:\")\n",
    "print(feature_importance_df)\n",
    "\n",
    "# Plot feature importances\n",
    "plt.figure(figsize=(8, 5))\n",
    "plt.barh(feature_importance_df['Feature'], feature_importance_df['Importance'])\n",
    "plt.gca().invert_yaxis()\n",
    "plt.title(\"Feature Importance (Random Forest)\")\n",
    "plt.xlabel(\"Importance\")\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.21"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
